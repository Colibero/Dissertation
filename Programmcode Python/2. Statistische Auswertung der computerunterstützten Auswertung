{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                              image short_image portion animal slide layer  \\\n",
      "0     36-4 py iba1 musk 20x_3385_rg    36-4 py       py     36     4  musk   \n",
      "1     36-4 py iba1 musk 20x_3386_rg    36-4 py       py     36     4  musk   \n",
      "2     36-4 py iba1 musk 20x_3387_rg    36-4 py       py     36     4  musk   \n",
      "3     36-4 py iba1 musk 20x_3388_rg    36-4 py       py     36     4  musk   \n",
      "4     36-4 py iba1 musk 20x_3389_rg    36-4 py       py     36     4  musk   \n",
      "...                             ...         ...     ...    ...   ...   ...   \n",
      "1783  45-7 py iba1 musk 20x_5109_rg    45-7 py       py     45     7  musk   \n",
      "1784  45-7 py iba1 musk 20x_5110_rg    45-7 py       py     45     7  musk   \n",
      "1785  45-7 py iba1 musk 20x_5111_rg    45-7 py       py     45     7  musk   \n",
      "1786  45-7 py iba1 musk 20x_5112_rg    45-7 py       py     45     7  musk   \n",
      "1787  45-7 py iba1 musk 20x_5113_rg    45-7 py       py     45     7  musk   \n",
      "\n",
      "     genotype  cell_count  \n",
      "0          WT           0  \n",
      "1          WT          39  \n",
      "2          WT           3  \n",
      "3          WT          10  \n",
      "4          WT           7  \n",
      "...       ...         ...  \n",
      "1783       WT           5  \n",
      "1784       WT          12  \n",
      "1785       WT           0  \n",
      "1786       WT           4  \n",
      "1787       WT           8  \n",
      "\n",
      "[1788 rows x 8 columns]\n",
      "all cells counted: 7504\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cell_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1788.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.196868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.028653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>66.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        cell_count\n",
       "count  1788.000000\n",
       "mean      4.196868\n",
       "std       8.028653\n",
       "min       0.000000\n",
       "25%       0.000000\n",
       "50%       0.000000\n",
       "75%       5.000000\n",
       "max      66.000000"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##count all positive cells in each image and create a dataframe for futher calculation\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "#list_image= os.listdir('d:/D_lw/APromotion/Bilder/cd206 main/raw_clean without 40-7 pgl muko/')\n",
    "#list_cells= os.listdir('d:/D_lw/APromotion/Bilder/cd206 main/img_pos_musk/')\n",
    "\n",
    "\n",
    "#iba1\n",
    "list_image= os.listdir('d:/D_lw/APromotion/Bilder/iba1 main/raw_update/')\n",
    "list_cells= os.listdir('d:/D_lw/APromotion/Bilder/iba1 main/img_pos_musk/')\n",
    "\n",
    "\n",
    "##ho1\n",
    "#list_image= os.listdir('d:/D_lw/APromotion/Bilder/ho1 main/img_raw/')\n",
    "#list_cells= os.listdir('d:/D_lw/APromotion/Bilder/ho1 main/img_pos_all/')\n",
    "list2=[]\n",
    "\n",
    "\n",
    "        \n",
    "list_image = [x[:29].lower() for x in list_image]\n",
    "list_cells = [x[:29].lower() for x in list_cells]\n",
    "\n",
    "df = pd.DataFrame(list_image ,columns= ['image'])\n",
    "\n",
    "df['short_image'] = df['image'].str[:8]\n",
    "\n",
    "\n",
    "df['portion'] = df['short_image'].str[5:7]\n",
    "df['animal'] = df['short_image'].str[:2]\n",
    "df['slide'] = df['short_image'].str[3]\n",
    "df['layer'] = df['image'].apply(lambda x: 'musk' if 'musk' in x else 'muco')\n",
    "df['genotype'] = df['animal'].apply(lambda x: 'WT' if int(x) in [36,38,41,43,45] else 'TG')\n",
    "df['cell_count'] = df['image'].apply(lambda x: list_cells.count(x))\n",
    "\n",
    "print(df)\n",
    "print('all cells counted:', df['cell_count'].sum())\n",
    "df.describe()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['blue', 'blue', 'blue', 'blue', 'blue', 'orange', 'orange', 'orange', 'orange', 'orange']\n",
      "                  portion mean_cell_slide          \n",
      "                                     mean       std\n",
      "0       Pars\\nglandularis        8.625099  4.535832\n",
      "1  Pars\\nproventricularis        9.518137  5.721075\n",
      "2          Pars\\npylorica        5.693088  5.788469\n",
      "  genotype animal  cell_count       std\n",
      "0       TG     37    8.093158  4.014672\n",
      "1       TG     39    6.271844  2.339461\n",
      "2       TG     40   10.473166  6.818711\n",
      "3       TG     42    3.238274  2.269018\n",
      "4       TG     44    6.522578  4.416920\n",
      "5       WT     36   12.241304  8.252994\n",
      "6       WT     38    9.081561  5.305345\n",
      "7       WT     41    5.887886  3.502256\n",
      "8       WT     43   13.208075  6.671281\n",
      "9       WT     45    5.660516  2.563625\n",
      "  genotype cell_count          \n",
      "                 mean       std\n",
      "0       TG   6.919804  2.652095\n",
      "1       WT   9.215868  3.493745\n",
      "Shapiro-Wilk WT: 0.3032957911491394 TG: 0.9291664361953735\n",
      "levenes test:  0.39053754263007817\n",
      "t-statistic: 1.170491012614562\n",
      "p-value: 0.2754875097374658\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 396x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 180x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##calculate and plot the counts in each portion, animal and genotype\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "#marker = 'CD206+'\n",
    "marker = 'IBA1+'\n",
    "ymax = 21\n",
    "\n",
    "\n",
    "df_musk = df.loc[df['layer']=='musk', ['image','short_image','genotype','animal', 'portion', 'cell_count']]\n",
    "#print(df_musk)\n",
    "portion_short = ['pp', 'pg', 'py']\n",
    "portion =['proventricularis', 'glandularis', 'pylorica']\n",
    "\n",
    "\n",
    "df_slide = df_musk.groupby(['short_image']).agg({'cell_count': ['mean', 'std']}).reset_index()\n",
    "df_slide['animal'] = df_slide['short_image'].str[:2]\n",
    "df_slide['genotype'] = df_slide['animal'].apply(lambda x: 'WT' if int(x) in [36,38,41,43,45] else 'TG')\n",
    "df_slide['portion_short'] = df_slide['short_image'].str[5:7]\n",
    "df_slide['portion'] = df_slide['portion_short'].apply(lambda x: 'Pars' + '\\n' + portion[portion_short.index(x)])\n",
    "df_slide.columns = ['slide', 'mean_cell_slide', 'std_cell_slide', 'animal','genotype','portion_short', 'portion']\n",
    "#print(df_slide)\n",
    "\n",
    "#create Dataframe by animal\n",
    "\n",
    "df_animal = df_slide.groupby(['animal']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "df_animal['genotype'] = df_animal['animal'].apply(lambda x: 'WT' if int(x) in [36,38,41,43,45] else 'TG')\n",
    "\n",
    "df_animal = df_animal.sort_values(['genotype'])\n",
    "df_animal.columns = ['animal', 'cell_count_mean', 'std', 'genotype']\n",
    "\n",
    "#plot barplot by animal\n",
    "\n",
    "colors_animal = ['blue']*5+['orange']*5\n",
    "\n",
    "ax = df_animal.plot(kind= 'bar', x='animal', y= 'mean_cell_slide',yerr = 'std',\n",
    "                     ylim = (0,ymax),capsize= 5, stacked = True, figsize = [5.5,4]) \n",
    "\n",
    "for idx, bar in enumerate(ax.patches):\n",
    "    bar.set_color(colors_animal[idx])\n",
    "\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "\n",
    "colors = {'Transgen':'blue', 'Wildtyp':'orange'}         \n",
    "labels = list(colors.keys())\n",
    "handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]\n",
    "plt.legend(handles, labels)\n",
    "plt.title(marker +' Zellen pro Tier', fontsize = 14)\n",
    "#ax.legend(labels = ['Wildtyp', 'Transgen'])\n",
    "plt.ylabel('Zellen pro mpf', fontsize = 12)\n",
    "plt.xlabel('Tiernummer', fontsize = 12)\n",
    "plt.xticks(fontsize =12)\n",
    "#set Dataframe by Portion\n",
    "\n",
    "df_portion = df_slide.groupby(['portion']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "colors_portion = ['orange', 'blue', 'green']\n",
    "print(df_portion)\n",
    "\n",
    "#plot mean cellcount by portion\n",
    "ax = df_portion.plot(kind= 'bar', y= 'mean_cell_slide',yerr = 'std',x = 'portion', capsize=5, stacked = True,ylim = (0, ymax), \n",
    "                color = 'violet', legend = None) \n",
    "\n",
    "plt.title(marker + \" in den Magenanteilen\", fontsize = 14)\n",
    "plt.ylabel('Zellen pro mpf', fontsize = 12)\n",
    "plt.xlabel('Magenanteil', fontsize =12)\n",
    "plt.xticks(fontsize =12)\n",
    "#plt.show()\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "\n",
    "#calculate a df sorted by genotype\n",
    "df_genotype = df_slide.groupby(['genotype', 'animal']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "\n",
    "df_genotype.columns = ['genotype', 'animal', 'cell_count', 'std']\n",
    "print(df_genotype)\n",
    "df_genotype2 = df_genotype.groupby(['genotype']).agg({'cell_count': ['mean', 'std']}).reset_index()\n",
    "print(df_genotype2)\n",
    "\n",
    "\n",
    "colors_genotype = ['blue', 'orange']\n",
    "ax = df_genotype2.plot(kind= 'bar', y= 'cell_count',yerr = 'std',x = 'genotype', capsize=6, stacked = True,ylim = (0,ymax), \n",
    "                 figsize = [2.5,4], legend = None) \n",
    "\n",
    "# Assign custom colors to each bar\n",
    "for idx, bar in enumerate(ax.patches):\n",
    "    bar.set_color(colors_genotype[idx])\n",
    "plt.title(marker +\" Zellen in TG und WT\", fontsize = 14)\n",
    "plt.ylabel('Zellen pro mpf', fontsize = 12)\n",
    "plt.xlabel('Genotyp', fontsize = 12)\n",
    "plt.xticks(fontsize =12)\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "df_portion_genotype = df_slide.groupby(['genotype','portion']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "groupA = df_genotype.groupby('genotype').get_group('WT')['cell_count']\n",
    "groupB = df_genotype.groupby('genotype').get_group('TG')['cell_count']\n",
    "t_stat, p_value = stats.ttest_ind(groupA, groupB)\n",
    "\n",
    "## print the results\n",
    "\n",
    "#Shapiro Wilk\n",
    "\n",
    "\n",
    "# Test for normal distribution using the Shapiro-Wilk test\n",
    "_, p1 = stats.shapiro(groupA)\n",
    "_, p2 = stats.shapiro(groupB)\n",
    "print('Shapiro-Wilk WT:', p1, 'TG:', p2)\n",
    "\n",
    "\n",
    "\n",
    "# Test for variance equality using Levene's test\n",
    "_, p3 = stats.levene(groupA, groupB)\n",
    "print('levenes test: ', p3)\n",
    "\n",
    "print('t-statistic:', t_stat)\n",
    "print('p-value:', p_value)\n",
    "\n",
    "df_animal.to_pickle(marker+'animal.pkl') \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  genotype  quotient          \n",
      "                mean       std\n",
      "0       TG  0.814153  0.394756\n",
      "1       WT  0.660116  0.239569\n",
      "Shapiro-Wilk WT: 0.43158939480781555 TG: 0.5226098299026489\n",
      "levenes test:  0.2551066174667321\n",
      "t-statistic: -0.7459159096137824\n",
      "p-value: 0.47706141568160254\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 396x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 180x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##plot the quotient of CD206 to IBA1\n",
    "\n",
    "#create Dataframe with quotient\n",
    "\n",
    "df_animal_iba1 = pd.read_pickle('IBA1+animal.pkl')\n",
    "df_animal_cd206 = pd.read_pickle('CD206+animal.pkl') \n",
    "#print(df_animal_iba1)\n",
    "#print(df_animal_cd206)\n",
    "df_quotient= df_animal_iba1.filter(['animal', 'genotype', 'cell_count_mean'])\n",
    "df_quotient.columns=['animal', 'genotype', 'iba1']\n",
    "df_quotient['cd206'] = df_animal_cd206['cell_count_mean']\n",
    "df_quotient['quotient'] = df_quotient['cd206']/df_quotient['iba1']\n",
    "df_quotient\n",
    "\n",
    "#plot df_quotient\n",
    "\n",
    "ymax= 1.4\n",
    "colors_animal = ['blue']*5+['orange']*5\n",
    "\n",
    "ax = df_quotient.plot(kind= 'bar', x='animal', y= 'quotient',\n",
    "                     ylim = (0,ymax),capsize= 5, stacked = True, figsize = [5.5,4]) \n",
    "\n",
    "for idx, bar in enumerate(ax.patches):\n",
    "    bar.set_color(colors_animal[idx])\n",
    "\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "\n",
    "colors = {'Transgen':'blue', 'Wildtyp':'orange'}         \n",
    "labels = list(colors.keys())\n",
    "handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]\n",
    "plt.legend(handles, labels)\n",
    "plt.title('CD206+/IBA1+ Zellen pro Tier', fontsize = 14)\n",
    "#ax.legend(labels = ['Wildtyp', 'Transgen'])\n",
    "plt.ylabel('Quotient CD206+/IBA1+', fontsize = 12)\n",
    "plt.xlabel('Tiernummer', fontsize = 12)\n",
    "plt.xticks(fontsize =12)\n",
    "\n",
    "\n",
    "#make df sorted by genotype of the quotients\n",
    "df_genotype3 = df_quotient.groupby(['genotype']).agg({'quotient': ['mean', 'std']}).reset_index()\n",
    "print(df_genotype3)\n",
    "\n",
    "\n",
    "colors_genotype = ['blue', 'orange']\n",
    "ax = df_genotype3.plot(kind= 'bar', y= 'quotient',yerr = 'std',x = 'genotype', capsize=6, stacked = True,ylim = (0,ymax), \n",
    "                 figsize = [2.5,4], legend = None) \n",
    "\n",
    "# Assign custom colors to each bar\n",
    "for idx, bar in enumerate(ax.patches):\n",
    "    bar.set_color(colors_genotype[idx])\n",
    "plt.title('CD206+/IBA1+', fontsize = 14)\n",
    "plt.ylabel('Quotient CD206+/IBA1+', fontsize = 12)\n",
    "plt.xlabel('Genotyp', fontsize = 12)\n",
    "plt.xticks(fontsize =12)\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "df_portion_genotype = df_slide.groupby(['genotype','portion']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "\n",
    "\n",
    "#do statistics\n",
    "import scipy.stats as stats\n",
    "\n",
    "groupA = df_quotient.groupby('genotype').get_group('WT')['quotient']\n",
    "groupB = df_quotient.groupby('genotype').get_group('TG')['quotient']\n",
    "t_stat, p_value = stats.ttest_ind(groupA, groupB)\n",
    "\n",
    "# print the results\n",
    "\n",
    "#Shapiro Wilk\n",
    "\n",
    "\n",
    "# Test for normal distribution using the Shapiro-Wilk test\n",
    "_, p1 = stats.shapiro(groupA)\n",
    "_, p2 = stats.shapiro(groupB)\n",
    "print('Shapiro-Wilk WT:', p1, 'TG:', p2)\n",
    "\n",
    "\n",
    "\n",
    "# Test for variance equality using Levene's test\n",
    "_, p3 = stats.levene(groupA, groupB)\n",
    "print('levenes test: ', p3)\n",
    "\n",
    "print('t-statistic:', t_stat)\n",
    "print('p-value:', p_value)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  animal  cell_count_mean       std genotype\n",
      "1     37         0.528073  0.388316       TG\n",
      "3     39         0.382079  0.389353       TG\n",
      "4     40         0.430215  0.370592       TG\n",
      "6     42         0.345589  0.233198       TG\n",
      "8     44         0.397562  0.147055       TG\n",
      "0     36         0.632949  0.410108       WT\n",
      "2     38         0.448784  0.275613       WT\n",
      "5     41         0.334921  0.292931       WT\n",
      "7     43         0.394020  0.201738       WT\n",
      "9     45         0.443109  0.318312       WT\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  portion      mean       std  n\n",
      "1  Pars\\nproventricularis  0.345518  0.173706  1\n",
      "0       Pars\\nglandularis  0.777442  0.201411  2\n",
      "2          Pars\\npylorica  0.178230  0.103241  3\n",
      "  genotype animal  cell_count       std\n",
      "0       TG     37    0.528073  0.388316\n",
      "1       TG     39    0.382079  0.389353\n",
      "2       TG     40    0.430215  0.370592\n",
      "3       TG     42    0.345589  0.233198\n",
      "4       TG     44    0.397562  0.147055\n",
      "5       WT     36    0.632949  0.410108\n",
      "6       WT     38    0.448784  0.275613\n",
      "7       WT     41    0.334921  0.292931\n",
      "8       WT     43    0.394020  0.201738\n",
      "9       WT     45    0.443109  0.318312\n",
      "  genotype cell_count          \n",
      "                 mean       std\n",
      "0       TG   0.416703  0.069297\n",
      "1       WT   0.450756  0.111684\n",
      "Shapiro-Wilk WT: 0.3821021020412445 TG: 0.5272367000579834\n",
      "levenes test:  0.5789304812219438\n",
      "t-statistic: 0.579329203314439\n",
      "p-value: 0.5783111220785238\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 396x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 504x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 180x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#calculation and plotting of c-kit\n",
    "\n",
    "marker = 'ICC'\n",
    "\n",
    "portion_short = ['pp', 'pg', 'py']\n",
    "portion =['proventricularis', 'glandularis', 'pylorica']\n",
    "\n",
    "\n",
    "df_ckit = pd.read_csv('ckit_count_fin.csv', ';')\n",
    "df_ckit['animal'] = df_ckit['slide'].str[:2]\n",
    "df_ckit['portion_short'] = df_ckit['slide'].str[4:6]\n",
    "df_ckit['portion'] = df_ckit['portion_short'].apply(lambda x: 'Pars' + '\\n' + portion[portion_short.index(x)])\n",
    "df_ckit['genotype'] = df_ckit['animal'].apply(lambda x: 'WT' if int(x) in [36,38,41,43,45] else 'TG')\n",
    "\n",
    "\n",
    "df_ckit.columns = ['slide', 'mean_cell_slide', 'animal', 'portion_short', 'portion', 'genotype']\n",
    "#print(df_ckit)\n",
    "\n",
    "\n",
    "#create Dataframe by animal\n",
    "\n",
    "df_animal_ckit = df_ckit.groupby(['animal']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "df_animal_ckit['genotype'] = df_animal_ckit['animal'].apply(lambda x: 'WT' if int(x) in [36,38,41,43,45] else 'TG')\n",
    "\n",
    "df_animal_ckit = df_animal_ckit.sort_values(['genotype'])\n",
    "df_animal_ckit.columns = ['animal', 'cell_count_mean', 'std', 'genotype']\n",
    "print(df_animal_ckit)\n",
    "#plot barplot by animal\n",
    "\n",
    "colors_animal = ['blue']*5+['orange']*5\n",
    "\n",
    "ax = df_animal_ckit.plot(kind= 'bar', x='animal', y= 'cell_count_mean',yerr = 'std',\n",
    "                     ylim = (0,ymax),capsize= 5, stacked = True, figsize = [5.5,4]) \n",
    "\n",
    "for idx, bar in enumerate(ax.patches):\n",
    "    bar.set_color(colors_animal[idx])\n",
    "\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "\n",
    "colors = {'Transgen':'blue', 'Wildtyp':'orange'}         \n",
    "labels = list(colors.keys())\n",
    "handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]\n",
    "plt.legend(handles, labels)\n",
    "plt.title(marker +' pro Tier', fontsize = 14)\n",
    "#ax.legend(labels = ['Wildtyp', 'Transgen'])\n",
    "plt.ylabel('ICC pro hpf', fontsize = 13)\n",
    "plt.xlabel('Tiernummer', fontsize = 13)\n",
    "plt.xticks(fontsize =12)\n",
    "#set Dataframe by Portion\n",
    "\n",
    "df_portion_ckit = df_ckit.groupby(['portion']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "df_portion_ckit['n'] = [2,1,3]\n",
    "df_portion_ckit = df_portion_ckit.sort_values(['n'])\n",
    "df_portion_ckit.columns = ['portion', 'mean', 'std', 'n']\n",
    "print(df_portion_ckit)\n",
    "\n",
    "#plot mean cellcount by portion\n",
    "ax = df_portion_ckit.plot(kind= 'bar', y= 'mean',yerr = 'std',x = 'portion', capsize=5, stacked = True,ylim = (0, ymax), \n",
    "                color = 'violet', legend = None, figsize = [7,4]) \n",
    "\n",
    "plt.title(marker + \" in den Magenanteilen\", fontsize = 14)\n",
    "plt.ylabel('ICC pro hpf', fontsize = 13)\n",
    "plt.xlabel('Magenanteil', fontsize =13)\n",
    "plt.xticks(fontsize =12)\n",
    "#plt.show()\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "\n",
    "#calculate a df sorted by genotype\n",
    "df_genotype_ckit = df_ckit.groupby(['genotype', 'animal']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "\n",
    "df_genotype_ckit.columns = ['genotype', 'animal', 'cell_count', 'std']\n",
    "print(df_genotype_ckit)\n",
    "df_genotype2 = df_genotype_ckit.groupby(['genotype']).agg({'cell_count': ['mean', 'std']}).reset_index()\n",
    "print(df_genotype2)\n",
    "\n",
    "\n",
    "colors_genotype = ['blue', 'orange']\n",
    "ax = df_genotype2.plot(kind= 'bar', y= 'cell_count',yerr = 'std',x = 'genotype', capsize=6, stacked = True,ylim = (0,ymax), \n",
    "                 figsize = [2.5,4], legend = None) \n",
    "\n",
    "# Assign custom colors to each bar\n",
    "for idx, bar in enumerate(ax.patches):\n",
    "    bar.set_color(colors_genotype[idx])\n",
    "plt.title(marker +\" in TG und WT\", fontsize = 14)\n",
    "plt.ylabel('ICC pro hpf', fontsize = 13)\n",
    "plt.xlabel('Genotyp', fontsize = 13)\n",
    "plt.xticks(fontsize =12)\n",
    "ax.tick_params(axis='x', labelrotation=0)\n",
    "df_portion_genotype = df_ckit.groupby(['genotype','portion']).agg({'mean_cell_slide': ['mean', 'std']}).reset_index()\n",
    "\n",
    "\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "groupA = df_genotype_ckit.groupby('genotype').get_group('WT')['cell_count']\n",
    "groupB = df_genotype_ckit.groupby('genotype').get_group('TG')['cell_count']\n",
    "t_stat, p_value = stats.ttest_ind(groupA, groupB)\n",
    "\n",
    "# print the results\n",
    "\n",
    "#Shapiro Wilk\n",
    "\n",
    "\n",
    "# Test for normal distribution using the Shapiro-Wilk test\n",
    "_, p1 = stats.shapiro(groupA)\n",
    "_, p2 = stats.shapiro(groupB)\n",
    "print('Shapiro-Wilk WT:', p1, 'TG:', p2)\n",
    "\n",
    "\n",
    "\n",
    "# Test for variance equality using Levene's test\n",
    "_, p3 = stats.levene(groupA, groupB)\n",
    "print('levenes test: ', p3)\n",
    "\n",
    "print('t-statistic:', t_stat)\n",
    "print('p-value:', p_value)\n",
    "\n",
    "#df_animal_ckit.to_pickle(marker+'animal.pkl')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
